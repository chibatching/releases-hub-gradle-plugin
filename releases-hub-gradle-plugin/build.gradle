ext.PROJECT_NAME = "Releases Hub Gradle Plugin"
ext.ARTIFACT_ID = "releases-hub-gradle-plugin"
group = "com.releaseshub"

apply plugin: "com.jdroidtools.gradle.plugin"

buildscript {
	dependencies {
		classpath BuildLibs.jdroid_gradle_project_plugin
	}
}

dependencies {
	compile(Libs.jdroid_java_core)
	compile(Libs.jdroid_java_http_okhttp)
	compile(Libs.jdroid_java_github)

	testCompile(Libs.junit)
}

gradlePlugin {
	plugins {
		publisherPlugin {
			id = "com.releaseshub.gradle.plugin"
			implementationClass = "com.releaseshub.gradle.plugin.ReleasesHubGradlePlugin"
		}
	}
}

jdroid {
	publishingPom = new Action<org.gradle.api.publish.maven.MavenPom>() {
		@Override
		public void execute(org.gradle.api.publish.maven.MavenPom mavenPom) {
			mavenPom.getName().set("releases-hub-gradle-plugin");
			mavenPom.getDescription().set("Gradle Plugin to automatically upgrade the project dependencies and send a GitHub pull request with the changes");

			mavenPom.getUrl().set("https://releaseshub.com");
			mavenPom.getInceptionYear().set("2019");
			mavenPom.organization(new Action<MavenPomOrganization>() {
				@Override
				public void execute(MavenPomOrganization mavenPomOrganization) {
					mavenPomOrganization.getName().set("Releases Hub");
					mavenPomOrganization.getUrl().set("https://releaseshub.com");
				}

			});
			mavenPom.licenses(new Action<MavenPomLicenseSpec>() {
				@Override
				public void execute(MavenPomLicenseSpec mavenPomLicenseSpec) {
					mavenPomLicenseSpec.license(new Action<MavenPomLicense>() {
						@Override
						public void execute(MavenPomLicense mavenPomLicense) {
							mavenPomLicense.getName().set("The Apache License, Version 2.0");
							mavenPomLicense.getUrl().set("http://www.apache.org/licenses/LICENSE-2.0.txt");
							mavenPomLicense.getDistribution().set("repo");
						}

					});
				}

			});
			mavenPom.developers(new Action<MavenPomDeveloperSpec>() {
				@Override
				public void execute(MavenPomDeveloperSpec mavenPomDeveloperSpec) {
					mavenPomDeveloperSpec.developer(new Action<MavenPomDeveloper>() {
						@Override
						public void execute(MavenPomDeveloper mavenPomDeveloper) {
							mavenPomDeveloper.getName().set("Maxi Rosson");
							mavenPomDeveloper.getEmail().set("maxi@releaseshub.com");
						}

					});
				}

			});

			mavenPom.scm(new Action<MavenPomScm>() {
				@Override
				public void execute(MavenPomScm mavenPomScm) {
					mavenPomScm.getConnection().set("scm:git:" + jdroid.getRepositorySshUrl());
					mavenPomScm.getDeveloperConnection().set("scm:git:" + jdroid.getRepositorySshUrl());
					mavenPomScm.getUrl().set(jdroid.getRepositorySshUrl());
				}

			});
			mavenPom.issueManagement(new Action<MavenPomIssueManagement>() {
				@Override
				public void execute(MavenPomIssueManagement mavenPomIssueManagement) {
					mavenPomIssueManagement.getSystem().set("GitHub");
					mavenPomIssueManagement.getUrl().set(jdroid.getRepositoryUrl() + "/issues");
				}

			});

		}

	};
}
